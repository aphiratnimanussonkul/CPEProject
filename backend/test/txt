package main

import (
		"gopkg.in/couchbase/gocb.v1"
		"encoding/json"
		"log"
		"net/http"
		"github.com/gorilla/mux"
		"github.com/satori/go.uuid"
)
type Person struct {
    ID        string `json:"id,omitempty"`
    Firstname string `json:"firstname,omitempty"`
    Lastname  string `json:"lastname,omitempty"`
    Email     string `json:"email,omitempty"`
}

type N1qlPerson struct {
    Person Person `json:"person"`
}

var bucket *gocb.Bucket

func GetPersonEndpoint(w http.ResponseWriter, req *http.Request) {
    var n1qlParams []interface{}
    query := gocb.NewN1qlQuery("SELECT * FROM `restful-sample` AS person WHERE META(person).id = $1")
    params := mux.Vars(req)
    n1qlParams = append(n1qlParams, params["id"])
    rows, _ := bucket.ExecuteN1qlQuery(query, n1qlParams)
    var row N1qlPerson
    rows.One(&row)
    json.NewEncoder(w).Encode(row.Person)
}

func GetPeopleEndpoint(w http.ResponseWriter, req *http.Request) {
    var person []Person
    query := gocb.NewN1qlQuery("SELECT * FROM `restful-sample` AS person")
    rows, _ := bucket.ExecuteN1qlQuery(query, nil)
    var row N1qlPerson
    for rows.Next(&row) {
        person = append(person, row.Person)
    }
    json.NewEncoder(w).Encode(person)
}

func CreatePersonEndpoint(w http.ResponseWriter, req *http.Request) {
    var person Person
    var n1qlParams []interface{}
    _ = json.NewDecoder(req.Body).Decode(&person)
    query := gocb.NewN1qlQuery("INSERT INTO `restful-sample` (KEY, VALUE) VALUES ($1, {'firstname': $2, 'lastname': $3, 'email': $4})") 
	n1qlParams = append(n1qlParams, uuid.Must(uuid.NewV4()).String())
    n1qlParams = append(n1qlParams, person.Firstname)
    n1qlParams = append(n1qlParams, person.Lastname)
    n1qlParams = append(n1qlParams, person.Email)
    _, err := bucket.ExecuteN1qlQuery(query, n1qlParams)
    if err != nil {
        w.WriteHeader(401)
        w.Write([]byte(err.Error()))
        return
    }
    json.NewEncoder(w).Encode(person)
}

func UpdatePersonEndpoint(w http.ResponseWriter, req *http.Request) {
    var person Person
    var n1qlParams []interface{}
    _ = json.NewDecoder(req.Body).Decode(&person)
    query := gocb.NewN1qlQuery("UPDATE `restful-sample` USE KEYS $1 SET firstname = $2, lastname = $3, email = $4")
    params := mux.Vars(req)
    n1qlParams = append(n1qlParams, params["id"])
    n1qlParams = append(n1qlParams, person.Firstname)
    n1qlParams = append(n1qlParams, person.Lastname)
    n1qlParams = append(n1qlParams, person.Email)
    _, err := bucket.ExecuteN1qlQuery(query, n1qlParams)
    if err != nil {
        w.WriteHeader(401)
        w.Write([]byte(err.Error()))
        return
    }
    json.NewEncoder(w).Encode(person)
}

func DeletePersonEndpoint(w http.ResponseWriter, req *http.Request) {
    var n1qlParams []interface{}
    query := gocb.NewN1qlQuery("DELETE FROM `restful-sample` AS person WHERE META(person).id = $1")
    params := mux.Vars(req)
    n1qlParams = append(n1qlParams, params["id"])
    _, err := bucket.ExecuteN1qlQuery(query, n1qlParams)
    if err != nil {
        w.WriteHeader(401)
        w.Write([]byte(err.Error()))
        return
    }
    json.NewEncoder(w).Encode(&Person{})
}


func main() {
    router := mux.NewRouter()
    cluster, _ := gocb.Connect("couchbase://localhost")
	bucket, _ = cluster.OpenBucket("restful-sample", "")
	cluster.Authenticate(gocb.PasswordAuthenticator{
        Username: "Administrator",
        Password: "Ththth00",
    })
    router.HandleFunc("/people", GetPeopleEndpoint).Methods("GET")
    router.HandleFunc("/people/{id}", GetPersonEndpoint).Methods("GET")
    router.HandleFunc("/people", CreatePersonEndpoint).Methods("PUT")
    router.HandleFunc("/people/{id}", UpdatePersonEndpoint).Methods("POST")
    router.HandleFunc("/people/{id}", DeletePersonEndpoint).Methods("DELETE")
    log.Fatal(http.ListenAndServe(":12345", router))
}

// func main(){
	

// 	cluster, _ := gocb.Connect("couchbase://localhost")
// 	cluster.Authenticate(gocb.PasswordAuthenticator{
//         Username: "Administrator",
//         Password: "Ththth00",
//     })
// 	fmt.Println(cluster)
// 	bucket, _ := cluster.OpenBucket ("example", "")
// 	var person Person
// 	bucket.Upsert("nraboy", Person{
// 		Firstname : "Nic",
// 		Lastname: "Raboy",
// 		Social: []SocialMedia{
// 			{Title: "Twitter", Link: "http://www.twitter.com/nraboy"},
// 			{Title: "Github", Link: "http://www.github.com/nraboy"},
// 		},
// 	},0)
// 	bucket.Get("nraboy", &person)
// 	jsonBytes, _ := json.Marshal(person)
// 	fmt.Println(string(jsonBytes)) 

// 	router := mux.NewRouter()
// 	// People = append(People, Person{ID: "1",
// 	// 						 Firstname: "Nic", 
// 	// 						 Lastname: "sss", 
// 	// 						 Address: &Address{City: "test",
// 	// 						  					State: "dhgghj"},
// 	// 						},
// 	// 				)
// 	router.HandleFunc("/test", getPeopleEndpoint).Methods("GET")
// 	router.HandleFunc("/home", getPeopleEndpoint).Methods("POST")
// 	log.Fatal(http.ListenAndServe(":12345", router))
// }